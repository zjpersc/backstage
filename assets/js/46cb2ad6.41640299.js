/*! For license information please see 46cb2ad6.41640299.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[500289],{603905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(667294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(g,r(r({ref:n},p),{},{components:t})):a.createElement(g,r({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},866620:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});t(827378);var a=t(603905);function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}const r={id:"index",title:"Building Backend Plugins and Modules",sidebar_label:"Overview",description:"Building backend plugins and modules using the new backend system"},s=void 0,l={unversionedId:"backend-system/building-plugins-and-modules/index",id:"backend-system/building-plugins-and-modules/index",title:"Building Backend Plugins and Modules",description:"Building backend plugins and modules using the new backend system",source:"@site/../docs/backend-system/building-plugins-and-modules/01-index.md",sourceDirName:"backend-system/building-plugins-and-modules",slug:"/backend-system/building-plugins-and-modules/index",permalink:"/docs/backend-system/building-plugins-and-modules/index",draft:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/backend-system/building-plugins-and-modules/01-index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"index",title:"Building Backend Plugins and Modules",sidebar_label:"Overview",description:"Building backend plugins and modules using the new backend system"},sidebar:"docs",previous:{title:"Migration Guide",permalink:"/docs/backend-system/building-backends/migrating"},next:{title:"Testing",permalink:"/docs/backend-system/building-plugins-and-modules/testing"}},c={},p=[{value:"Creating a new Plugin",id:"creating-a-new-plugin",level:2},{value:"Plugins",id:"plugins",level:2},{value:"Modules",id:"modules",level:2},{value:"HTTP Handlers",id:"http-handlers",level:3},{value:"Database Access",id:"database-access",level:3},{value:"Customization",id:"customization",level:2},{value:"Extension Points",id:"extension-points",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Options",id:"options",level:3}],u={toc:p};function d(e){var{components:n}=e,t=o(e,["components"]);return(0,a.kt)("wrapper",i({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"DISCLAIMER: The new backend system is in alpha, and still under active development. While we have reviewed the interfaces carefully, they may still be iterated on before the stable release."))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: If you have an existing backend and/or backend plugins that are not yet\nusing the new backend system, see ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/building-plugins-and-modules/migrating"}),"migrating"),".")),(0,a.kt)("p",null,"This section covers how to build your own backend ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/plugins"}),"plugins")," and\n",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/modules"}),"modules"),". They are sometimes collectively referred to as\nbackend ",(0,a.kt)("em",{parentName:"p"},"features"),", and are the building blocks that adopters add to their\n",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/backends"}),"backends"),"."),(0,a.kt)("h2",i({},{id:"creating-a-new-plugin"}),"Creating a new Plugin"),(0,a.kt)("p",null,"This guide assumes that you already have a Backend project set up. Even if you only want to develop a single plugin for publishing, we still recommend that you do so in a standard Backstage monorepo project, as you often end up needing multiple packages. For instructions on how to set up a new project, see our ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/getting-started/#prerequisites"}),"getting started")," documentation."),(0,a.kt)("p",null,"To create a Backend plugin, run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn new"),", select ",(0,a.kt)("inlineCode",{parentName:"p"},"backend-plugin"),", and fill out the rest of the prompts. This will create a new package at ",(0,a.kt)("inlineCode",{parentName:"p"},"plugins/<pluginId>-backend"),", which will be the main entrypoint for your plugin."),(0,a.kt)("h2",i({},{id:"plugins"}),"Plugins"),(0,a.kt)("p",null,"A basic backend plugin might look as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"import {\n  createBackendPlugin,\n  coreServices,\n} from '@backstage/backend-plugin-api';\nimport { createExampleRouter } from './router';\n\nexport const examplePlugin = createBackendPlugin({\n  pluginId: 'example',\n  register(env) {\n    env.registerInit({\n      deps: {\n        // Declare dependencies to services that you want to consume\n        logger: coreServices.logger,\n        httpRouter: coreServices.httpRouter,\n      },\n      async init({\n        // Requested service instances get injected as per above\n        logger,\n        httpRouter,\n      }) {\n        // Perform your initialization and access the services as needed\n        const example = createExampleRouter(logger);\n        logger.info('Hello from example plugin');\n        httpRouter.use(example);\n      },\n    });\n  },\n});\n")),(0,a.kt)("p",null,"When you depend on ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin")," scoped services, you'll receive an instance of them\nthat's specific to your plugin. In the example above, the logger might tag\nmessages with your plugin ID, and the HTTP router might prefix API routes with\nyour plugin ID, depending on the implementation used."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/naming-patterns"}),"the article on naming patterns")," for\ndetails on how to best choose names/IDs for plugins and related backend system\nitems."),(0,a.kt)("h2",i({},{id:"modules"}),"Modules"),(0,a.kt)("p",null,"Backend modules are used to extend ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/plugins"}),"plugins")," with\nadditional features or change existing behavior. They must always be installed\nin the same backend instance as the plugin that they extend, and may only extend\na single plugin. Modules interact with their target plugin using the ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/extension-points"}),"extension\npoints")," registered by the plugin, while also being\nable to depend on the ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/services"}),"services")," of that plugin.\nThat last point is worth reiterating: injected ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin")," scoped services will be\nthe exact\nsame ones as the target plugin will receive later, i.e. they will be scoped\nusing the target ",(0,a.kt)("inlineCode",{parentName:"p"},"pluginId")," of the module."),(0,a.kt)("p",null,"A module depends on the extension points exported by the target plugin's library\npackage, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/plugin-catalog-node"),", and does not directly\ndeclare a dependency on the plugin package itself. This is to avoid a direct\ndependency and potentially cause duplicate installations of the plugin package,\nwhile duplicate installations of library packages should always be supported."),(0,a.kt)("p",null,"The following is an example of how to create a module that adds a new processor\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"catalogProcessingExtensionPoint"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"import { createBackendModule } from '@backstage/backend-plugin-api';\nimport { catalogProcessingExtensionPoint } from '@backstage/plugin-catalog-node';\nimport { MyCustomProcessor } from './MyCustomProcessor';\n\nexport const catalogModuleExampleCustomProcessor = createBackendModule({\n  moduleId: 'exampleCustomProcessor',\n  pluginId: 'catalog',\n  register(env) {\n    env.registerInit({\n      deps: {\n        catalog: catalogProcessingExtensionPoint,\n        logger: coreServices.logger,\n      },\n      async init({ catalog }) {\n        catalog.addProcessor(new MyCustomProcessor(logger));\n      },\n    });\n  },\n});\n")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/naming-patterns"}),"the article on naming patterns")," for\ndetails on how to best choose names/IDs for modules and related backend system\nitems."),(0,a.kt)("p",null,"Notice that we're placing the extension point we want to interact with in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"deps")," option, while also depending on the logger service at the same time. When\ninitializing modules we can depend on both extension points and services\ninterchangeably. You can also depend on multiple extension points at once, in\ncase the implementation of the module requires it."),(0,a.kt)("p",null,"It is typically best to keep modules slim and to each only add a single new\nfeature. It is often the case that it is better to create two separate modules\nrather than one that provides both features. The one limitation here is that\nmodules can not interact with each other and need to be self contained."),(0,a.kt)("h3",i({},{id:"http-handlers"}),"HTTP Handlers"),(0,a.kt)("p",null,"Since modules have access to the same services as the plugin they extend, they\nare also able to register their own HTTP handlers. For more information about\nthe HTTP service, see ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/core-services/index"}),"core services"),". When\nregistering HTTP handlers, it is important to try to avoid any future conflict\nwith the plugin itself, or other modules. A recommended naming pattern is to\nregister the handlers under the ",(0,a.kt)("inlineCode",{parentName:"p"},"/modules/<module-id>")," path, where ",(0,a.kt)("inlineCode",{parentName:"p"},"<module-id>"),"\nis the kebab-case ID of the module, for example\n",(0,a.kt)("inlineCode",{parentName:"p"},"/modules/example-custom-processor/v1/validators"),". In a standard backend setup\nthe full path would then be\n",(0,a.kt)("inlineCode",{parentName:"p"},"<backendUrl>/api/catalog/modules/example-custom-processor/v1/validators"),"."),(0,a.kt)("h3",i({},{id:"database-access"}),"Database Access"),(0,a.kt)("p",null,"The same applies for modules that perform their own migrations and interact with\nthe database. They will run on the same logical database instance as the target\nplugin, so care must be taken to choose table names that do not risk colliding\nwith those of the plugin. A recommended naming pattern is ",(0,a.kt)("inlineCode",{parentName:"p"},"<package\nname>__<table name>"),", for example the ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/backend-tasks")," package creates\ntables named ",(0,a.kt)("inlineCode",{parentName:"p"},"backstage_backend_tasks__<table>"),". If you use the default ",(0,a.kt)("a",i({parentName:"p"},{href:"https://knexjs.org/guide/migrations.html"}),(0,a.kt)("inlineCode",{parentName:"a"},"Knex"),"\nmigration facilities"),", you will also\nwant to make sure that it uses similarly prefixed migration state tables for its\ninternal bookkeeping needs, so they do not collide with the main ones used by\nthe plugin itself. You can do this as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"await knex.migrate.latest({\n  directory: migrationsDir,\n  tableName: 'backstage_backend_tasks__knex_migrations',\n});\n")),(0,a.kt)("h2",i({},{id:"customization"}),"Customization"),(0,a.kt)("p",null,"There are several ways of configuring and customizing plugins and modules."),(0,a.kt)("h3",i({},{id:"extension-points"}),"Extension Points"),(0,a.kt)("p",null,"Whenever you want to allow modules to configure your plugin dynamically, for\nexample in the way that the catalog backend lets catalog modules inject\nadditional entity providers, you can use the extension points mechanism. This is\ndescribed in detail with code examples in ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/backend-system/architecture/extension-points"}),"the extension points architecture\narticle"),", while the following is a more\nslim example of how to implement an extension point for a plugin:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"import { createExtensionPoint } from '@backstage/backend-plugin-api';\n\n// This is the extension point interface, which is how modules interact with your plugin.\nexport interface ExamplesExtensionPoint {\n  addExample(example: Example): void;\n}\n\n// This is the extension point reference that encapsulates the above interface.\nexport const examplesExtensionPoint =\n  createExtensionPoint<ExamplesExtensionPoint>({\n    id: 'example.examples',\n  });\n\n// This is the implementation of the extension point, which is internal to your plugin.\nclass ExamplesExtension implements ExamplesExtensionPoint {\n  #examples: Example[] = [];\n\n  addExample(example: Example): void {\n    this.#examples.push(example);\n  }\n\n  // Note that this method is internal to this implementation\n  getRegisteredExamples() {\n    return this.#examples;\n  }\n}\n\n// The following shows how your plugin would register the extension point\n// and use the features that other modules have registered.\nexport const examplePlugin = createBackendPlugin({\n  pluginId: 'example',\n  register(env) {\n    const examplesExtensions = new ExamplesExtension();\n    env.registerExtensionPoint(examplesExtensionPoint, examplesExtensions);\n\n    env.registerInit({\n      deps: { logger: coreServices.logger },\n      async init({ logger }) {\n        // We can access `examplesExtension` directly, giving us access to the internal interface.\n        const examples = examplesExtension.getRegisteredExamples();\n\n        logger.info(`The following examples have been registered: ${examples}`);\n      },\n    });\n  },\n});\n")),(0,a.kt)("p",null,"This is a very common type of extension point, one where modules are given the opportunity to register features to be used by the plugin. In this case modules are able to register examples that are then used by our examples plugin."),(0,a.kt)("p",null,"Note that the public extension point interface only needs to expose the ",(0,a.kt)("inlineCode",{parentName:"p"},"addExample")," method, while the ",(0,a.kt)("inlineCode",{parentName:"p"},"getRegisteredExamples()")," method is kept internal to the plugin."),(0,a.kt)("h3",i({},{id:"configuration"}),"Configuration"),(0,a.kt)("p",null,"Your plugin or module can leverage the app configuration to configure its own\ninternal behavior. You do this by adding a dependency on ",(0,a.kt)("inlineCode",{parentName:"p"},"coreServices.config"),"\nand reading from that. This pattern is a good fit especially for customization\nthat needs to be different across environments."),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"import { coreServices } from '@backstage/backend-plugin-api';\n\nexport const examplePlugin = createBackendPlugin({\n  pluginId: 'example',\n  register(env) {\n    env.registerInit({\n      deps: { config: coreServices.config },\n      async init({ config }) {\n        // Here you can read from the current config as you see fit, e.g.:\n        const value = config.getOptionalString('example.value');\n      },\n    });\n  },\n});\n")),(0,a.kt)("p",null,"Before adding custom configuration options, make sure to read ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/conf/"}),"the configuration\ndocs"),", in particular the section on ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/conf/defining"}),"defining configuration\nfor your own plugins")," which explains how to establish a\nconfiguration schema for your specific plugin."),(0,a.kt)("h3",i({},{id:"options"}),"Options"),(0,a.kt)("p",null,"You'll have noted that the return values from ",(0,a.kt)("inlineCode",{parentName:"p"},"createBackendPlugin")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"createBackendModule")," are actually factory functions. These can be made to\naccept options that shall be passed in at initialization time."),(0,a.kt)("p",null,"This pattern can be a good fit for fairly simple, static configuration values."),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"export interface ExampleOptions {\n  silent?: boolean;\n}\n\nexport const examplePlugin = createBackendPlugin(\n  (options?: ExampleOptions) => ({\n    pluginId: 'example',\n    register(env) {\n      env.registerInit({\n        deps: {\n          // Omitted dependencies but they remain the same as above\n        },\n        async init(\n          {\n            /* ... */\n          },\n        ) {\n          // Here you can access the given options and act accordingly, e.g.:\n          if (!options?.silent) {\n            // ...\n          }\n        },\n      });\n    },\n  }),\n);\n")),(0,a.kt)("p",null,"The return type from ",(0,a.kt)("inlineCode",{parentName:"p"},"createBackendPlugin")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"createBackendModule")," will mimic\nthis, resulting in a factory function that accepts an optional options object.\nYou can also make it required to pass in options, by removing the optionality\n(the question mark on the options) above."),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-ts"}),"backend.add(examplePlugin({ silent: true }));\n")),(0,a.kt)("p",null,"Use this pattern sparingly. There is a big convenience benefit in allowing\npeople to easily install backend plugins without having to always pass in a\nlarge number of options, and these options cannot easily be made dynamic based\non the environment etc."))}d.isMDXComponent=!0},862525:e=>{var n=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var a={};return"abcdefghijklmnopqrst".split("").forEach((function(e){a[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},a)).join("")}catch(i){return!1}}()?Object.assign:function(e,o){for(var r,s,l=i(e),c=1;c<arguments.length;c++){for(var p in r=Object(arguments[c]))t.call(r,p)&&(l[p]=r[p]);if(n){s=n(r);for(var u=0;u<s.length;u++)a.call(r,s[u])&&(l[s[u]]=r[s[u]])}}return l}},541535:(e,n,t)=>{var a=t(862525),i=60103,o=60106;var r=60109,s=60110,l=60112;var c=60115,p=60116;if("function"==typeof Symbol&&Symbol.for){var u=Symbol.for;i=u("react.element"),o=u("react.portal"),u("react.fragment"),u("react.strict_mode"),u("react.profiler"),r=u("react.provider"),s=u("react.context"),l=u("react.forward_ref"),u("react.suspense"),c=u("react.memo"),p=u("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function m(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function f(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||g}function y(){}function b(e,n,t){this.props=e,this.context=n,this.refs=h,this.updater=t||g}f.prototype.isReactComponent={},f.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(m(85));this.updater.enqueueSetState(this,e,n,"setState")},f.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=f.prototype;var k=b.prototype=new y;k.constructor=b,a(k,f.prototype),k.isPureReactComponent=!0;var v={current:null},x=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function P(e,n,t){var a,o={},r=null,s=null;if(null!=n)for(a in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(r=""+n.key),n)x.call(n,a)&&!w.hasOwnProperty(a)&&(o[a]=n[a]);var l=arguments.length-2;if(1===l)o.children=t;else if(1<l){for(var c=Array(l),p=0;p<l;p++)c[p]=arguments[p+2];o.children=c}if(e&&e.defaultProps)for(a in l=e.defaultProps)void 0===o[a]&&(o[a]=l[a]);return{$$typeof:i,type:e,key:r,ref:s,props:o,_owner:v.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var O=/\/+/g;function j(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return n[e]}))}(""+e.key):n.toString(36)}function E(e,n,t,a,r){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case o:l=!0}}if(l)return r=r(l=e),e=""===a?"."+j(l,0):a,Array.isArray(r)?(t="",null!=e&&(t=e.replace(O,"$&/")+"/"),E(r,n,t,"",(function(e){return e}))):null!=r&&(N(r)&&(r=function(e,n){return{$$typeof:i,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(r,t+(!r.key||l&&l.key===r.key?"":(""+r.key).replace(O,"$&/")+"/")+e)),n.push(r)),1;if(l=0,a=""===a?".":a+":",Array.isArray(e))for(var c=0;c<e.length;c++){var p=a+j(s=e[c],c);l+=E(s,n,t,p,r)}else if(p=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof p)for(e=p.call(e),c=0;!(s=e.next()).done;)l+=E(s=s.value,n,t,p=a+j(s,c++),r);else if("object"===s)throw n=""+e,Error(m(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n));return l}function T(e,n,t){if(null==e)return e;var a=[],i=0;return E(e,a,"","",(function(e){return n.call(t,e,i++)})),a}function C(e){if(-1===e._status){var n=e._result;n=n(),e._status=0,e._result=n,n.then((function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)}),(function(n){0===e._status&&(e._status=2,e._result=n)}))}if(1===e._status)return e._result;throw e._result}var _={current:null};function S(){var e=_.current;if(null===e)throw Error(m(321));return e}},827378:(e,n,t)=>{t(541535)}}]);