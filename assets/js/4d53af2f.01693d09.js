/*! For license information please see 4d53af2f.01693d09.js.LICENSE.txt */
"use strict";(self.webpackChunkbackstage_microsite=self.webpackChunkbackstage_microsite||[]).push([[952770],{603905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(667294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=i,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},642820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});n(827378);var a=n(603905);function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}const r={id:"cli-build-system",title:"Build System",description:"A deep dive into the Backstage build system"},l=void 0,s={unversionedId:"local-dev/cli-build-system",id:"local-dev/cli-build-system",title:"Build System",description:"A deep dive into the Backstage build system",source:"@site/../docs/local-dev/cli-build-system.md",sourceDirName:"local-dev",slug:"/local-dev/cli-build-system",permalink:"/docs/local-dev/cli-build-system",draft:!1,editUrl:"https://github.com/backstage/backstage/edit/master/docs/../docs/local-dev/cli-build-system.md",tags:[],version:"current",frontMatter:{id:"cli-build-system",title:"Build System",description:"A deep dive into the Backstage build system"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/local-dev/cli-overview"},next:{title:"Commands",permalink:"/docs/local-dev/cli-commands"}},p={},d=[{value:"Design Considerations",id:"design-considerations",level:2},{value:"Structure",id:"structure",level:2},{value:"Package Roles",id:"package-roles",level:2},{value:"Formatting",id:"formatting",level:2},{value:"Linting",id:"linting",level:2},{value:"Type Checking",id:"type-checking",level:2},{value:"Testing",id:"testing",level:2},{value:"Building",id:"building",level:2},{value:"Bundling",id:"bundling",level:2},{value:"Frontend Development",id:"frontend-development",level:3},{value:"Frontend Production",id:"frontend-production",level:3},{value:"Backend Development",id:"backend-development",level:3},{value:"Backend Production",id:"backend-production",level:3},{value:"Transpilation",id:"transpilation",level:2},{value:"Loaders",id:"loaders",level:2},{value:"Jest Configuration",id:"jest-configuration",level:2},{value:"Debugging Jest Tests",id:"debugging-jest-tests",level:3},{value:"IntelliJ IDEA",id:"intellij-idea",level:4},{value:"VS Code",id:"vs-code",level:4},{value:"Publishing",id:"publishing",level:2},{value:"Subpath Exports",id:"subpath-exports",level:2},{value:"Experimental Type Build",id:"experimental-type-build",level:2}],c={toc:d};function u(e){var{components:t}=e,n=o(e,["components"]);return(0,a.kt)("wrapper",i({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The Backstage build system is a collection of build and development tools that\nhelp you lint, test, develop and finally release your Backstage projects. The\npurpose of the build system is to provide an out-of-the-box solution that works\nwell with Backstage and lets you focus on building an app rather than having to\nspend time setting up your own tooling."),(0,a.kt)("p",null,"The build system setup is part of the\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/@backstage/cli"}),"@backstage/cli"),", and already\nincluded in any project that you create using\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/@backstage/create-app"}),"@backstage/create-app"),". It\nis similar to for example\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/react-scripts"}),"react-scripts"),", which is the\ntooling you get with\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/facebook/create-react-app"}),"create-react-app"),". The Backstage\nbuild system relies heavily on existing open source tools from the JavaScript\nand TypeScript ecosystem, such as ",(0,a.kt)("a",i({parentName:"p"},{href:"https://webpack.js.org/"}),"Webpack"),",\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://rollupjs.org/"}),"Rollup"),", ",(0,a.kt)("a",i({parentName:"p"},{href:"https://jestjs.io/"}),"Jest"),", and\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://eslint.org/"}),"ESLint"),"."),(0,a.kt)("h2",i({},{id:"design-considerations"}),"Design Considerations"),(0,a.kt)("p",null,"There are a couple of core beliefs and constraints that guided the design of the\nBackstage build system. The first and most important is that we put the\ndevelopment experience first. If we need to cut corners or add complexity we do\nso in other areas, but the experience of firing up an editor and iterating on\nsome code should always be as smooth as possible."),(0,a.kt)("p",null,"In addition, there are a number of hard and soft requirements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Monorepos - The build system should support multi-package workspaces"),(0,a.kt)("li",{parentName:"ul"},"Publishing - It should be possible to build and publish individual packages"),(0,a.kt)("li",{parentName:"ul"},"Scale - It should scale to hundreds of large packages without excessive wait\ntimes"),(0,a.kt)("li",{parentName:"ul"},"Reloads - The development flow should support quick on-save hot reloads"),(0,a.kt)("li",{parentName:"ul"},"Simple - Usage should be simple and configuration should be kept minimal"),(0,a.kt)("li",{parentName:"ul"},"Universal - Development towards both web applications, isomorphic packages,\nand Node.js"),(0,a.kt)("li",{parentName:"ul"},"Modern - The build system targets modern environments"),(0,a.kt)("li",{parentName:"ul"},"Editors - Type checking and linting should be available within most editors")),(0,a.kt)("p",null,"During the design of the build system this collection of requirements was not\nsomething that was supported by existing tools like for example ",(0,a.kt)("inlineCode",{parentName:"p"},"react-scripts"),".\nThe requirements of scaling in combination of monorepo, publishing, and editor\nsupport led us to adopting our own specialized setup."),(0,a.kt)("h2",i({},{id:"structure"}),"Structure"),(0,a.kt)("p",null,"We can divide the development flow within Backstage into a couple of different\nsteps:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Formatting")," - Applies a consistent formatting to your source code"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Linting")," - Analyzes your source code for potential problems"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Type Checking")," - Verifies that TypeScript types are valid"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testing")," - Runs different levels of test suites towards your project"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Building")," - Compiles the source code in an individual package"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Bundling")," - Combines a package and all of its dependencies into a\nproduction-ready bundle")),(0,a.kt)("p",null,"These steps are generally kept isolated form each other, with each step focusing\non its specific task. For example, we do not do linting or type checking\ntogether with the building or bundling. This is so that we can provide more\nflexibility and avoid duplicate work, improving performance. It is strongly\nrecommended that as a part of developing within Backstage you use a code editor\nor IDE that has support for formatting, linting, and type checking."),(0,a.kt)("p",null,"Let's dive into a detailed look at each of these steps and how they are\nimplemented in a typical Backstage app."),(0,a.kt)("h2",i({},{id:"package-roles"}),"Package Roles"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Package roles were introduced in March 2022. To migrate existing projects, see the ",(0,a.kt)("a",i({parentName:"p"},{href:"/docs/tutorials/package-role-migration"}),"migration guide"),".")),(0,a.kt)("p",null,"The Backstage build system uses the concept of package roles in order to help keep\nconfiguration lean, provide utility and tooling, and enable optimizations. A package\nrole is a single string that identifies what the purpose of a package is, and it's\ndefined in the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," of each package like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'{\n  "name": "my-package",\n  "backstage": {\n    "role": "<role>"\n  },\n  ...\n}\n')),(0,a.kt)("p",null,"These are the available roles that are currently supported by the Backstage build system:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Role"),(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Description"),(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Example"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"frontend"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Bundled frontend application"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"packages/app"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"backend"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Bundled backend application"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"packages/backend"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"cli"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Package used as a command-line interface"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/cli"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/codemods"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"web-library"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Web library for use by other packages"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/plugin-catalog-react"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"node-library"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Node.js library for use by other packages"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/plugin-techdocs-node"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"common-library"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Isomorphic library for use by other packages"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/plugin-permission-common"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"frontend-plugin"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Backstage frontend plugin"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/plugin-scaffolder"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"frontend-plugin-module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Backstage frontend plugin module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/plugin-analytics-module-ga"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"backend-plugin"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Backstage backend plugin"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/plugin-auth-backend"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),"backend-plugin-module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Backstage backend plugin module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"@backstage/plugin-search-backend-module-pg"))))),(0,a.kt)("p",null,"Most of the steps that we cover below have an accompanying command that is intended to be used as a package script. The commands are all available under the ",(0,a.kt)("inlineCode",{parentName:"p"},"backstage-cli package")," category, and many of the commands will behave differently depending on the role of the package. The commands are intended to be used like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'{\n  "scripts": {\n    "start": "backstage-cli package start",\n    "build": "backstage-cli package build",\n    "lint": "backstage-cli package lint",\n    ...\n  }\n}\n')),(0,a.kt)("h2",i({},{id:"formatting"}),"Formatting"),(0,a.kt)("p",null,"The formatting setup lives completely within each Backstage application and is\nnot part of the CLI. In an app created with ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/create-app")," the\nformatting is handled by ",(0,a.kt)("a",i({parentName:"p"},{href:"https://prettier.io/"}),"prettier"),", but each application\ncan choose their own formatting rules and switch to a different formatter if\ndesired."),(0,a.kt)("h2",i({},{id:"linting"}),"Linting"),(0,a.kt)("p",null,"The Backstage CLI includes a ",(0,a.kt)("inlineCode",{parentName:"p"},"lint")," command, which is a thin wrapper around\n",(0,a.kt)("inlineCode",{parentName:"p"},"eslint"),". It adds a few options that can't be set through configuration, such as\nincluding the ",(0,a.kt)("inlineCode",{parentName:"p"},".ts")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".tsx")," extensions in the set of linted files. The ",(0,a.kt)("inlineCode",{parentName:"p"},"lint"),"\ncommand simply provides a sane default and is not intended to be customizable.\nIf you want to supply more advanced options you can invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"eslint")," directly\ninstead."),(0,a.kt)("p",null,"In addition to the ",(0,a.kt)("inlineCode",{parentName:"p"},"lint")," command, the Backstage CLI also includes a set of base\nESLint configurations, one for frontend and one for backend packages. These lint\nconfigurations in turn build on top of the lint rules from\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/spotify/web-scripts"}),"@spotify/web-scripts"),"."),(0,a.kt)("p",null,"In a standard Backstage setup, each individual package has its own lint\nconfiguration, along with a root configuration that applies to the entire\nproject. The configuration in each package starts out as a standard configuration\nthat is determined based on the package role, but it can be customized to fit the needs of each package."),(0,a.kt)("p",null,"A minimal ",(0,a.kt)("inlineCode",{parentName:"p"},".eslintrc.js")," configuration now looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-js"}),"module.exports = require('@backstage/cli/config/eslint-factory')(__dirname);\n")),(0,a.kt)("p",null,"But you can provide custom overrides for each package using the optional second argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-js"}),"module.exports = require('@backstage/cli/config/eslint-factory')(__dirname, {\n  ignorePatterns: ['templates/'],\n  rules: {\n    'jest/expect-expect': 'off',\n  },\n});\n")),(0,a.kt)("p",null,"The configuration factory also provides utilities for extending the configuration in ways that are otherwise very cumbersome to do with plain ESLint, particularly for rules like ",(0,a.kt)("inlineCode",{parentName:"p"},"no-restricted-syntax"),". These are the extra keys that are available:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Key"),(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"tsRules")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional rules to apply to TypeScript files")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"testRules")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional rules to apply to tests files")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"restrictedImports")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional paths to add to ",(0,a.kt)("inlineCode",{parentName:"td"},"no-restricted-imports"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"restrictedSrcImports")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional paths to add to ",(0,a.kt)("inlineCode",{parentName:"td"},"no-restricted-imports")," in src files")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"restrictedTestImports")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional paths to add to ",(0,a.kt)("inlineCode",{parentName:"td"},"no-restricted-imports")," in test files")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"restrictedSyntax")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional patterns to add to ",(0,a.kt)("inlineCode",{parentName:"td"},"no-restricted-syntax"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"restrictedSrcSyntax")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional patterns to add to ",(0,a.kt)("inlineCode",{parentName:"td"},"no-restricted-syntax")," in src files")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"restrictedTestSyntax")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Additional patterns to add to ",(0,a.kt)("inlineCode",{parentName:"td"},"no-restricted-syntax")," in test files")))),(0,a.kt)("h2",i({},{id:"type-checking"}),"Type Checking"),(0,a.kt)("p",null,"Just like formatting, the Backstage CLI does not have its own command for type\nchecking. It does however have a base configuration with both recommended\ndefaults as well as some required settings for the build system to work."),(0,a.kt)("p",null,"Perhaps the most notable part about the TypeScript setup in Backstage projects\nis that the entire project is one big compilation unit. This is due to\nperformance optimization as well as ease of use, since breaking projects down\ninto smaller pieces has proven to both lead to a more complicated setup, as well\nas type checking of the entire project being an order of magnitude slower. In\norder to make this setup work, the entrypoint of each package needs to point to\nthe TypeScript source files, which in turn causes some complications during\npublishing that we'll talk about in ",(0,a.kt)("a",i({parentName:"p"},{href:"#publishing"}),"that section"),"."),(0,a.kt)("p",null,"The type checking is generally configured to be incremental for local\ndevelopment, with the output stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist-types")," folder in the repo root.\nThis provides a significant speedup when running ",(0,a.kt)("inlineCode",{parentName:"p"},"tsc")," multiple times locally,\nbut it does make the initial run a little bit slower. Because of the slower\ninitial run we disable incremental type checking in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tcs:full")," Yarn script\nthat is included by default in any Backstage app and is intended for use in CI."),(0,a.kt)("p",null,"Another optimization that is used by default is to skip the checking of library\ntypes, this means that TypeScript will not verify that types within\n",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," are sound. Disabling this check significantly speeds up type\nchecking, but in the end it is still an important check that should not be\ncompletely omitted, it's simply unlikely to catch issues that are introduced\nduring local development. What we opt for instead is to include the check in CI\nthrough the ",(0,a.kt)("inlineCode",{parentName:"p"},"tsc:full")," script, which will run a full type check, including\n",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules"),"."),(0,a.kt)("p",null,"For the two reasons mentioned above, it is ",(0,a.kt)("strong",{parentName:"p"},"highly")," recommended to use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"tsc:full")," script to run type checking in CI."),(0,a.kt)("h2",i({},{id:"testing"}),"Testing"),(0,a.kt)("p",null,"As mentioned above, the Backstage CLI uses ",(0,a.kt)("a",i({parentName:"p"},{href:"https://jestjs.io/"}),"Jest"),", which is\na JavaScript test framework that covers both test execution and assertions. Jest\nexecutes all tests in Node.js, including frontend browser code. The trick it\nuses is to execute the tests in a Node.js VM using various predefined\nenvironments, such as one based on ",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/jsdom/jsdom"}),(0,a.kt)("inlineCode",{parentName:"a"},"jsdom")),"\nthat helps mimic browser APIs and behavior."),(0,a.kt)("p",null,"The Backstage CLI has its own command that helps execute tests,\n",(0,a.kt)("inlineCode",{parentName:"p"},"backstage-cli test"),", as well as its own configuration at\n",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/cli/config/jest.js"),". The command is a relatively thin wrapper around\nrunning ",(0,a.kt)("inlineCode",{parentName:"p"},"jest")," directly. Its main responsibility is to make sure the included\nconfiguration is used, as well setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"TZ")," environment\nvariables, and provided some sane default flags like ",(0,a.kt)("inlineCode",{parentName:"p"},"--watch")," if executed\nwithin a Git repository."),(0,a.kt)("p",null,"The by far biggest amount of work is done by the Jest configuration included\nwith the Backstage CLI. It both takes care of providing a default Jest\nconfiguration, as well as allowing for configuration overrides to be defined in\neach ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),". How this can be done in practice is discussed in the\n",(0,a.kt)("a",i({parentName:"p"},{href:"#jest-configuration"}),"Jest configuration")," section."),(0,a.kt)("h2",i({},{id:"building"}),"Building"),(0,a.kt)("p",null,"The primary purpose of the build process is to prepare packages for publishing,\nbut it's also used as part of the backend bundling process. Since it's only used\nin these two cases, any Backstage app that does not use the Backend parts of the\nproject may not need to interact with the build process at all. It can\nnevertheless be useful to know how it works, since all of the published\nBackstage packages are built using this process."),(0,a.kt)("p",null,"The build is currently using ",(0,a.kt)("a",i({parentName:"p"},{href:"https://rollupjs.org/"}),"Rollup")," and executes in\nisolation for each individual package. The build is invoked using the ",(0,a.kt)("inlineCode",{parentName:"p"},"package build"),"\ncommand, and applies to all packages roles except the bundled ones, ",(0,a.kt)("inlineCode",{parentName:"p"},"frontend")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"backend"),"."),(0,a.kt)("p",null,"There are three different possible outputs of the build process: JavaScript in\nCommonJS module format, JavaScript in ECMAScript module format, and type\ndeclarations. Each invocation of a build command will write one or more of these\noutputs to the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," folder in the package, and in addition copy any asset\nfiles like stylesheets or images. For more details on what syntax and file\nformats are supported by the build process, see the ",(0,a.kt)("a",i({parentName:"p"},{href:"#loaders"}),"loaders section"),"."),(0,a.kt)("p",null,"When building CommonJS or ESM output, the build commands will always use\n",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.ts")," as the entrypoint. All non-relative modules imports are considered\nexternal, meaning the Rollup build will only compile the source code of the package\nitself. All import statements of external dependencies, even within the same\nmonorepo, will stay intact."),(0,a.kt)("p",null,"The build of the type definitions works quite differently. The entrypoint of the\ntype definition build is the relative location of the package within the\n",(0,a.kt)("inlineCode",{parentName:"p"},"dist-types")," folder in the project root. This means that it is important to run\ntype checking before building any packages with type definitions, and that\nemitting type declarations must be enabled in the TypeScript configuration. The\nreason for the type definition build step is to strip out all types but the ones\nthat are exported from the package, leaving a much cleaner type definition file\nand making sure that the type definitions are in sync with the generated\nJavaScript."),(0,a.kt)("h2",i({},{id:"bundling"}),"Bundling"),(0,a.kt)("p",null,"The goal of the bundling process is to combine multiple packages together into a\nsingle runtime unit. The way this is done varies between frontend and backend,\nas well as local development versus production deployment. Because of that we\ncover each combination of these cases separately."),(0,a.kt)("h3",i({},{id:"frontend-development"}),"Frontend Development"),(0,a.kt)("p",null,"The frontend development setup is used for all packages with a frontend role, and\nis invoked using the ",(0,a.kt)("inlineCode",{parentName:"p"},"package start")," command.\nThe only difference between the different roles is that packages with the ",(0,a.kt)("inlineCode",{parentName:"p"},"'frontend'"),"\nrole use ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index")," as the entrypoint, while other roles instead use ",(0,a.kt)("inlineCode",{parentName:"p"},"dev/index"),".\nWhen running the start command, a development server\nwill be set up that listens to the protocol, host and port set by ",(0,a.kt)("inlineCode",{parentName:"p"},"app.baseUrl"),"\nin the configuration. If needed it is also possible to override the listening\noptions through the ",(0,a.kt)("inlineCode",{parentName:"p"},"app.listen")," configuration."),(0,a.kt)("p",null,"The frontend development bundling is currently based on\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://webpack.js.org/"}),"Webpack")," and\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://webpack.js.org/configuration/dev-server/"}),"Webpack Dev Server"),". The\nWebpack configuration itself varies very little between the frontend development\nand production bundling, so we'll dive more into the configuration in the\nproduction section below. The main differences are that ",(0,a.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV"),"\nis set to ",(0,a.kt)("inlineCode",{parentName:"p"},"'development'"),", minification is disabled, cheap source maps are used,\nand ",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/gaearon/react-hot-loader"}),"React Hot Loader")," is enabled."),(0,a.kt)("p",null,"If you prefer to run type checking and linting as part of the Webpack process,\nyou can enable usage of the\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/fork-ts-checker-webpack-plugin"}),(0,a.kt)("inlineCode",{parentName:"a"},"ForkTsCheckerWebpackPlugin")),"\nby passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"--check")," flag. Although as mentioned above, the recommended way\nto handle these checks during development is to use an editor that has built-in\nsupport for them instead."),(0,a.kt)("h3",i({},{id:"frontend-production"}),"Frontend Production"),(0,a.kt)("p",null,"The frontend production bundling creates your typical web content bundle, all\ncontained within a single folder, ready for static serving. It is used when building\npackages with the ",(0,a.kt)("inlineCode",{parentName:"p"},"'frontend'")," role, and unlike the development bundling there is no way to\nbuild a production bundle of an individual plugin. The output of the bundling\nprocess is written to the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," folder in the package."),(0,a.kt)("p",null,"Just like the development bundling, the production bundling is based on\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://webpack.js.org/"}),"Webpack"),". It uses the\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://webpack.js.org/plugins/html-webpack-plugin/"}),(0,a.kt)("inlineCode",{parentName:"a"},"HtmlWebpackPlugin"))," to\ngenerate the ",(0,a.kt)("inlineCode",{parentName:"p"},"index.html")," entry point, and includes a default template that's\nincluded with the CLI. You can replace the bundled template by adding\n",(0,a.kt)("inlineCode",{parentName:"p"},"public/index.html")," to your app package. The template has access to two global\nconstants, ",(0,a.kt)("inlineCode",{parentName:"p"},"publicPath")," which is the public base path that the bundle is\nintended to be served at, as well as ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," which is your regular frontend\nscoped configuration from ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/config"),"."),(0,a.kt)("p",null,"The Webpack configuration also includes a custom plugin for resolving packages\ncorrectly from linked in packages, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModuleScopePlugin")," from\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/react-dev-utils"}),(0,a.kt)("inlineCode",{parentName:"a"},"react-dev-utils"))," which makes\nsure that imports don't reach outside the package, a few fallbacks for some\nNode.js modules like ",(0,a.kt)("inlineCode",{parentName:"p"},"'buffer'")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"'events'"),", a plugin that writes the\nfrontend configuration to the bundle as ",(0,a.kt)("inlineCode",{parentName:"p"},"process.env.APP_CONFIG"),", and lastly minification handled by\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://esbuild.github.io/"}),"esbuild")," using the\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://npm.im/esbuild-loader"}),(0,a.kt)("inlineCode",{parentName:"a"},"esbuild-loader")),". There are of course also a\nset of loaders configured, which you can read more about in the\n",(0,a.kt)("a",i({parentName:"p"},{href:"#loaders"}),"loaders")," and ",(0,a.kt)("a",i({parentName:"p"},{href:"#transpilation"}),"transpilation")," sections."),(0,a.kt)("p",null,"During the build, the following constants are also set:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-java"}),"process.env.NODE_ENV = 'production';\nprocess.env.BUILD_INFO = {\n  cliVersion: '0.4.0', // The version of the CLI package\n  gitVersion: 'v0.4.0-86-ge54815618', // output of `git describe --always`\n  packageVersion: '1.0.5', // The version of the app package itself\n  timestamp: 1678900000000, // Date.now() when the build started\n  commit: 'e548156182a973ed4b459e18533afc22c85ffff8', // output of `git rev-parse HEAD`\n};\n")),(0,a.kt)("p",null,"The output of the bundling process is split into two categories of files with\nseparate caching strategies. The first is a set of generic assets with plain\nnames in the root of the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/")," folder. You will want to serve these with\nshort-lived caching or no caching at all. The second is a set of hashed static\nassets in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/static/")," folder, which you can configure to be cached for a\nmuch longer time."),(0,a.kt)("p",null,"The configuration of static assets is optimized for frequent changes and serving\nover HTTP 2.0. The assets are aggressively split into small chunks, which means\nthe browser has to make a lot of small requests to load them. The upside is that\nchanges to individual plugins and packages will invalidate a smaller number of\nfiles, thereby allowing for rapid development without much impact on the page\nload performance."),(0,a.kt)("h3",i({},{id:"backend-development"}),"Backend Development"),(0,a.kt)("p",null,"The backend development bundling is also based on Webpack, but rather than\nstarting up a web server, the backend is started up using the\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/run-script-webpack-plugin"}),(0,a.kt)("inlineCode",{parentName:"a"},"RunScriptWebpackPlugin")),".\nThe reason for using Webpack for development of the backend is both that it is a\nconvenient way to handle transpilation of a large set of packages, as well us\nallowing us to use hot module replacement and maintaining state while reloading\nindividual backend modules. This is particularly useful when running the backend\nwith in-memory SQLite as the database choice."),(0,a.kt)("p",null,"Except for executing in Node.js rather than a web server, the backend\ndevelopment bundling configuration is quite similar to the frontend one. It\nshares most of the Webpack configuration, including the transpilation setup.\nSome differences are that it does not inject any environment variables or node\nmodule fallbacks, and it uses\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://www.npmjs.com/package/webpack-node-externals"}),(0,a.kt)("inlineCode",{parentName:"a"},"webpack-node-externals")),"\nto avoid bundling in dependency modules."),(0,a.kt)("p",null,"If you want to inspect the running Node.js process, the ",(0,a.kt)("inlineCode",{parentName:"p"},"--inspect")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"--inspect-brk")," flags can be used, as they will be passed through as options to\n",(0,a.kt)("inlineCode",{parentName:"p"},"node")," execution."),(0,a.kt)("h3",i({},{id:"backend-production"}),"Backend Production"),(0,a.kt)("p",null,"The backend production bundling uses a completely different setup than the other\nbundling options. Rather than using Webpack, the backend production bundling\ninstead collects the backend packages and all of their local dependencies into a\ndeployment archive. The archive is written to ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/bundle.tar.gz"),", and contains\nthe packaged version of each of these packages. The layout of the packages in\nthe archive is the same as the directory layout in the monorepo, and the bundle\nalso contains the root ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn.lock")," files."),(0,a.kt)("p",null,"Note that before creating a production bundle you must first build all of the\nbackend packages. This can be done automatically when executing the\n",(0,a.kt)("inlineCode",{parentName:"p"},"backend:bundle")," command by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"--build-dependencies")," flag. It is an\noptional flag since it is quite common that the packages are already built\nearlier on in your build process, and building them again would result in\nduplicate work."),(0,a.kt)("p",null,"In order to use the bundle, you extract it into a directory, run\n",(0,a.kt)("inlineCode",{parentName:"p"},"yarn install --production"),", and then start the backend using your backend\npackage as the Node.js entry point, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"node packages/backend"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/bundle.tar.gz")," is accompanied by a ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/skeleton.tar.gz"),", which has\nthe same layout, but only contains ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," files. This skeleton archive\ncan be used to run a ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn install")," in environments that will benefit from the\ncaching that this enables, such as Docker image builds. To use the skeleton\narchive you copy it over to the target directory along with the root\n",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn.lock"),", extract the archive, and then run\n",(0,a.kt)("inlineCode",{parentName:"p"},"yarn install --production"),". Your target directory will then have all\ndependencies installed, and as soon as you copy over and extract the contents of\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"bundle.tar.gz")," archive on top of it, the backend will be ready to run."),(0,a.kt)("p",null,"The following is an example of a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," that can be used to package the\noutput of building a package with role ",(0,a.kt)("inlineCode",{parentName:"p"},"'backend'")," into an image:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-Dockerfile"}),'FROM node:16-bullseye-slim\nWORKDIR /app\n\nCOPY yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./\nRUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz\n\n# install sqlite3 dependencies\nRUN apt-get update && \\\n    apt-get install -y libsqlite3-dev python3 cmake g++ && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    yarn config set python /usr/bin/python3\n\nRUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -rf "$(yarn cache dir)"\n\nCOPY packages/backend/dist/bundle.tar.gz app-config.yaml ./\nRUN tar xzf bundle.tar.gz && rm bundle.tar.gz\n\nCMD ["node", "packages/backend"]\n')),(0,a.kt)("h2",i({},{id:"transpilation"}),"Transpilation"),(0,a.kt)("p",null,"The transpilers used by the Backstage CLI have been chosen according to the same\ndesign considerations that were mentioned above. A few specific requirements are\nof course support for TypeScript and JSX, but also React hot reloads or refresh,\nand hoisting of Jest mocks. The Backstage CLI also only targets up to date and\nmodern browsers, so we actually want to keep the transpilation process as\nlightweight as possible, and leave most syntax intact."),(0,a.kt)("p",null,"Apart from these requirements, the deciding factor for which transpiler to use\nis their speed. The build process keeps the integration with the transpilers\nlightweight, without additional plugins or such. This enables us to switch out\ntranspilers as new options and optimizations become available, and keep on using\nthe best options that are available."),(0,a.kt)("p",null,"Our current selection of transpilers are ",(0,a.kt)("a",i({parentName:"p"},{href:"https://esbuild.github.io/"}),"esbuild"),"\nand ",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/alangpierce/sucrase"}),"Sucrase"),". The reason we choose to\nuse two transpilers is that esbuild is faster than Sucrase and produces slightly\nnicer output, but it does not have the same set of features, for example it does\nnot support React hot reloading."),(0,a.kt)("p",null,"The benchmarking of the various options was done in\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/Rugvip/ts-build-bench"}),"ts-build-bench"),". This benchmarking\nproject allows for setups of different shapes and sizes of monorepos, but the\nsetup we consider the most important in our case is a large monorepo with lots\nof medium to large packages that are being bundled with Webpack. Some rough\nfindings have been that esbuild is the fastest option right now, with Sucrase\nfollowing closely after and then ",(0,a.kt)("a",i({parentName:"p"},{href:"https://swc.rs/"}),"SWC")," closely after that.\nAfter those there's a pretty big gap up to the TypeScript compiler run in\ntranspilation only mode, and lastly another jump up to Babel, being by far the\nslowest out of the transpilers we tested."),(0,a.kt)("p",null,"Something to note about these benchmarks is that they take the full Webpack\nbundling time into account. This means that even though some transpilation\noptions may be orders of magnitude faster than others, the total time is not\nimpacted in the same way as there are lots of other things that go into the\nbundling process. Still, switching from for example Babel to Sucrase is able to\nmake the bundling anywhere from two to five times faster."),(0,a.kt)("h2",i({},{id:"loaders"}),"Loaders"),(0,a.kt)("p",null,"The Backstage CLI is configured to support a set of loaders throughout all parts\nof the build system, including the bundling, tests, builds, and type checking.\nLoaders are always selected based on the file extension. The following is a list\nof all supported file extensions:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Extension"),(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Exports"),(0,a.kt)("th",i({parentName:"tr"},{align:null}),"Purpose"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".ts")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Script Module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"TypeScript")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".tsx")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Script Module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"TypeScript and XML")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".js")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Script Module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"JavaScript")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".jsx")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Script Module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"JavaScript and XML")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".mjs")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Script Module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"ECMAScript Module")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".cjs")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Script Module"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"CommonJS Module")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".json")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"JSON Data"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"JSON Data")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".yml")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"JSON Data"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"YAML Data")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".yaml")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"JSON Data"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"YAML Data")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".css")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"classes"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Style sheet")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".eot")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Font")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".ttf")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Font")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".woff2")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Font")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".woff")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Font")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".bmp")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Image")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".gif")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Image")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".jpeg")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Image")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".jpg")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Image")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".png")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Image")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".svg")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"URL Path"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"Image")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",i({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},".icon.svg")),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"React Component"),(0,a.kt)("td",i({parentName:"tr"},{align:null}),"SVG converted into a ",(0,a.kt)("a",i({parentName:"td"},{href:"https://mui.com/components/icons/#svgicon"}),"MUI SvgIcon"))))),(0,a.kt)("h2",i({},{id:"jest-configuration"}),"Jest Configuration"),(0,a.kt)("p",null,"The Backstage CLI bundles its own Jest configuration file, which is used\nautomatically when running ",(0,a.kt)("inlineCode",{parentName:"p"},"backstage-cli test"),". It's available at\n",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/cli/config/jest.js")," and can be inspected\n",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/backstage/backstage/blob/master/packages/cli/config/jest.js"}),"here"),".\nUsage of this configuration can be overridden either by passing a\n",(0,a.kt)("inlineCode",{parentName:"p"},"--config <path>")," flag to ",(0,a.kt)("inlineCode",{parentName:"p"},"backstage-cli test"),", or placing a ",(0,a.kt)("inlineCode",{parentName:"p"},"jest.config.js")," or\n",(0,a.kt)("inlineCode",{parentName:"p"},"jest.config.ts")," file in your package."),(0,a.kt)("p",null,"The built-in configuration brings a couple of benefits and features. The most\nimportant one being a baseline transformer and module configuration that enables\nsupport for the listed ",(0,a.kt)("a",i({parentName:"p"},{href:"#loaders"}),"loaders")," within tests. It will also\nautomatically detect and use ",(0,a.kt)("inlineCode",{parentName:"p"},"src/setupTests.ts")," if it exists, and provides a\ncoverage configuration that works well with our selected transpilers. The configuration\nwill also detect the appropriate Jest environment for each package role, running\n",(0,a.kt)("inlineCode",{parentName:"p"},"web-libraries")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},'"jsdom"')," environment, ",(0,a.kt)("inlineCode",{parentName:"p"},"node-libraries")," with ",(0,a.kt)("inlineCode",{parentName:"p"},'"node"'),", and so on."),(0,a.kt)("p",null,"The configuration also takes a project-wide approach, with the expectation most\nif not all packages within a monorepo will use the same base configuration. This\nallows for optimizations such as sharing the Jest transform cache across all\npackages in a monorepo, avoiding unnecessary transpilation. It also makes it\npossible to load in all Jest configurations at once, and with that run\n",(0,a.kt)("inlineCode",{parentName:"p"},"yarn test <pattern>")," from the root of a monorepo without having to set the\nworking directory to the package that the test is in."),(0,a.kt)("p",null,"Where small customizations are needed, such as setting coverage thresholds or\nsupport for specific transforms, it is possible to override the Jest\nconfiguration through the ",(0,a.kt)("inlineCode",{parentName:"p"},'"jest"')," field in ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),". For a full list of\noptions, see the ",(0,a.kt)("a",i({parentName:"p"},{href:"https://jestjs.io/docs/en/configuration"}),"Jest documentation"),".\nThese overrides will be loaded in from all ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," files in the directory ancestry, meaning\nthat you can place common configuration in the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," at the root of a\nmonorepo. If multiple overrides are found, they will be merged together with\nconfiguration further down in the directory tree taking precedence."),(0,a.kt)("p",null,"The overrides in a single ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," may for example look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'  "jest": {\n    "coverageThreshold": {\n      "global": {\n        "functions": 100,\n        "lines": 100,\n        "statements": 100\n      }\n    }\n  },\n')),(0,a.kt)("h3",i({},{id:"debugging-jest-tests"}),"Debugging Jest Tests"),(0,a.kt)("p",null,"For your productivity working with unit tests it's quite essential to have your debugging configured in IDE. It will help you to identify the root cause of the issue faster."),(0,a.kt)("h4",i({},{id:"intellij-idea"}),"IntelliJ IDEA"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Update Jest configuration template by:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Click on "Edit Configurations" on top panel'),(0,a.kt)("li",{parentName:"ul"},'In the modal dialog click on link "Edit configuration templates..." located in the bottom left corner.'),(0,a.kt)("li",{parentName:"ul"},'In "Jest package" you have to point to relative path of jest module (it will be suggested by IntelliJ), i.e. ',(0,a.kt)("inlineCode",{parentName:"li"},"~/proj/backstage/node_modules/jest")),(0,a.kt)("li",{parentName:"ul"},'In "Jest config" point to your jest configuration file, use absolute path for that, i.e. ',(0,a.kt)("inlineCode",{parentName:"li"},"--config /Users/user/proj/backstage/packages/cli/config/jest.js --runInBand"))),(0,a.kt)("ol",i({},{start:2}),(0,a.kt)("li",{parentName:"ol"},"Now you can run any tests by clicking on green arrow located on ",(0,a.kt)("inlineCode",{parentName:"li"},"describe")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"it"),".")),(0,a.kt)("h4",i({},{id:"vs-code"}),"VS Code"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-jsonc"}),'{\n  "jest.jestCommandLine": "node_modules/.bin/jest --config node_modules/@backstage/cli/config/jest.js",\n  // In a large repo like the Backstage main repo you likely want to disable\n  // watch mode and the initial test run too, leaving just manual and perhaps\n  // on-save test runs in place.\n  "jest.autoRun": {\n    "watch": false,\n    "onSave": "test-src-file"\n  }\n}\n')),(0,a.kt)("p",null,"A complete launch configuration for VS Code debugging may look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'{\n  "type": "node",\n  "name": "vscode-jest-tests",\n  "request": "launch",\n  "console": "integratedTerminal",\n  "internalConsoleOptions": "neverOpen",\n  "disableOptimisticBPs": true,\n  "program": "${workspaceFolder}/node_modules/.bin/jest",\n  "cwd": "${workspaceFolder}",\n  "args": [\n    "--config",\n    "node_modules/@backstage/cli/config/jest.js",\n    "--runInBand",\n    "--watchAll=false"\n  ]\n}\n')),(0,a.kt)("h2",i({},{id:"publishing"}),"Publishing"),(0,a.kt)("p",null,"Package publishing is an optional part of the Backstage build system and not\nsomething you will need to worry about unless you are publishing packages to a\nregistry. In order to publish a package, you first need to build it, which will\npopulate the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," folder. Because the Backstage build system is optimized for\nlocal development along with our particular TypeScript and bundling setup, it is\nnot possible to publish the package immediately at this point. This is because\nthe entry points of the package will still be pointing to ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.ts"),", but we\nwant them to point to ",(0,a.kt)("inlineCode",{parentName:"p"},"dist/")," in the published package."),(0,a.kt)("p",null,"In order to work around this, the Backstage CLI provides ",(0,a.kt)("inlineCode",{parentName:"p"},"prepack")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"postpack")," commands that help prepare the package for publishing. These scripts\nare automatically run by Yarn before publishing a package."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"prepack")," command will take entry point fields in ",(0,a.kt)("inlineCode",{parentName:"p"},'"publishConfig"'),", such as\n",(0,a.kt)("inlineCode",{parentName:"p"},'"main"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"module"'),", and move them to the top level of the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),".\nThis lets you point at the desired files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," folder during publishing.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"postpack")," command will simply revert this change in order to leave your\nproject clean."),(0,a.kt)("p",null,"The following is an excerpt of a typical setup of an isomorphic library package:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'  "main": "src/index.ts",\n  "types": "src/index.ts",\n  "publishConfig": {\n    "access": "public",\n    "main": "dist/index.cjs.js",\n    "module": "dist/index.esm.js",\n    "types": "dist/index.d.ts"\n  },\n  "scripts": {\n    "build": "backstage-cli package build",\n    "lint": "backstage-cli package lint",\n    "test": "backstage-cli package test",\n    "clean": "backstage-cli package clean",\n    "prepack": "backstage-cli package prepack",\n    "postpack": "backstage-cli package postpack"\n  },\n  "files": ["dist"],\n')),(0,a.kt)("h2",i({},{id:"subpath-exports"}),"Subpath Exports"),(0,a.kt)("p",null,"The Backstage CLI supports implementation of subpath exports through the ",(0,a.kt)("inlineCode",{parentName:"p"},'"exports"')," field in ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),". It might for example look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'  "name": "@backstage/plugin-foo",\n  "exports": {\n    ".": "./src/index.ts",\n    "./components": "./src/components.ts",\n  },\n')),(0,a.kt)("p",null,"This in turn would allow you to import anything exported in ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.ts")," via ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/plugins-foo"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"src/components.ts")," via ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/plugins-foo/components"),". Note that patterns are not supported, meaning the exports may not contain ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," wildcards."),(0,a.kt)("p",null,"As with the rest of the Backstage CLI build system, the setup is optimized for local development, which is why the ",(0,a.kt)("inlineCode",{parentName:"p"},'"exports"')," targets point directly to source files. The ",(0,a.kt)("inlineCode",{parentName:"p"},"package build")," command will detect the ",(0,a.kt)("inlineCode",{parentName:"p"},'"exports"')," field and automatically generate the corresponding ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," files, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"prepublish")," command will rewrite the ",(0,a.kt)("inlineCode",{parentName:"p"},'"exports"')," field to point to the ",(0,a.kt)("inlineCode",{parentName:"p"},"dist")," files, as well as generating folder-based entry points for backwards compatibility."),(0,a.kt)("p",null,"TypeScript support is currently handled though the ",(0,a.kt)("inlineCode",{parentName:"p"},"typesVersions")," field, as there is not yet a module resolution mode that works well with ",(0,a.kt)("inlineCode",{parentName:"p"},'"exports"'),". You can craft the ",(0,a.kt)("inlineCode",{parentName:"p"},"typesVersions")," yourself, but it will also be automatically generated by the ",(0,a.kt)("inlineCode",{parentName:"p"},"migrate package-exports")," command."),(0,a.kt)("p",null,"To add subpath exports to an existing package, simply add the desired ",(0,a.kt)("inlineCode",{parentName:"p"},'"exports"')," fields and then run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",i({parentName:"pre"},{className:"language-bash"}),"yarn backstage-cli migrate package-exports\n")),(0,a.kt)("h2",i({},{id:"experimental-type-build"}),"Experimental Type Build"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: Experimental type builds are deprecated and will be removed in the future. They have been replaced by ",(0,a.kt)("a",i({parentName:"p"},{href:"#subpath-exports"}),"subpath exports"),".")),(0,a.kt)("p",null,"The Backstage CLI has an experimental feature where multiple different type definition files can be generated for different release stages. The release stages are marked in the ",(0,a.kt)("a",i({parentName:"p"},{href:"https://tsdoc.org/"}),"TSDoc")," for each individual export, using either ",(0,a.kt)("inlineCode",{parentName:"p"},"@public"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"@alpha"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"@beta"),". Rather than just building a single ",(0,a.kt)("inlineCode",{parentName:"p"},"index.d.ts")," file, the build process will instead output ",(0,a.kt)("inlineCode",{parentName:"p"},"index.d.ts"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"index.beta.d.ts"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"index.alpha.d.ts"),". Each of these files will have exports from more unstable release stages stripped, meaning that ",(0,a.kt)("inlineCode",{parentName:"p"},"index.d.ts")," will omit all exports marked with ",(0,a.kt)("inlineCode",{parentName:"p"},"@alpha")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"@beta"),", while ",(0,a.kt)("inlineCode",{parentName:"p"},"index.beta.d.ts")," will omit all exports marked with ",(0,a.kt)("inlineCode",{parentName:"p"},"@alpha"),"."),(0,a.kt)("p",null,"This feature is aimed at projects that publish to package registries and wish to maintain different levels of API stability within each package. There is no need to use this within a single monorepo, as it has no effect due to only applying to built and published packages."),(0,a.kt)("p",null,"In order for the experimental type build to work, ",(0,a.kt)("inlineCode",{parentName:"p"},"@microsoft/api-extractor")," must be installed in your project, as it is an optional peer dependency of the Backstage CLI. There are then three steps that need to be taken for each package where you want to enable this feature:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add the ",(0,a.kt)("inlineCode",{parentName:"li"},"--experimental-type-build")," flag to the ",(0,a.kt)("inlineCode",{parentName:"li"},'"build"')," script of the package."),(0,a.kt)("li",{parentName:"ul"},"Add either one or both of ",(0,a.kt)("inlineCode",{parentName:"li"},'"alphaTypes"')," and ",(0,a.kt)("inlineCode",{parentName:"li"},'"betaTypes"')," to the ",(0,a.kt)("inlineCode",{parentName:"li"},'"publishConfig"')," of the package:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'"publishConfig": {\n  ...\n  "types": "dist/index.d.ts",\n  "alphaTypes": "dist/index.alpha.d.ts",\n  "betaTypes": "dist/index.beta.d.ts"\n},\n'))),(0,a.kt)("li",{parentName:"ul"},"Add either one or both of ",(0,a.kt)("inlineCode",{parentName:"li"},'"alpha"')," and ",(0,a.kt)("inlineCode",{parentName:"li"},'"beta"')," to the ",(0,a.kt)("inlineCode",{parentName:"li"},'"files"')," of the package:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",i({parentName:"pre"},{className:"language-json"}),'"files": [\n  "dist",\n  "alpha",\n  "beta"\n]\n')))),(0,a.kt)("p",null,"Once this setup is complete, users of the published packages will only be able to access the stable API via the main package entry point, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"@acme/my-plugin"),". Exports marked with ",(0,a.kt)("inlineCode",{parentName:"p"},"@alpha")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"@beta")," will only be available via the ",(0,a.kt)("inlineCode",{parentName:"p"},"/alpha")," entry point, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"@acme/my-plugin/alpha"),", and exports marked with ",(0,a.kt)("inlineCode",{parentName:"p"},"@beta")," will only be available via ",(0,a.kt)("inlineCode",{parentName:"p"},"/beta"),". This does not apply within the monorepo that contains the package. There all exports still have to be imported via the main entry point."),(0,a.kt)("p",null,"Note that these different entry points are only separated during type checking. At runtime they all share the same code which contains the exports from all releases stages."),(0,a.kt)("p",null,"An example of this setup can be seen in the ",(0,a.kt)("a",i({parentName:"p"},{href:"https://github.com/backstage/backstage/blob/da0675bf9f28ed1460f03635a22d3c26abd14707/packages/catalog-model/package.json#L14"}),(0,a.kt)("inlineCode",{parentName:"a"},"@backstage/catalog-model"))," package, which has enabled ",(0,a.kt)("inlineCode",{parentName:"p"},"alpha")," type exports. With this setup, exports marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"@alpha")," are only available for import via ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/catalog-model/alpha"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"@backstage/catalog-model")," package currently does not have any exports marked as ",(0,a.kt)("inlineCode",{parentName:"p"},"@beta"),", or a ",(0,a.kt)("inlineCode",{parentName:"p"},"/beta")," entry point."))}u.isMDXComponent=!0},862525:e=>{var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var a={};return"abcdefghijklmnopqrst".split("").forEach((function(e){a[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},a)).join("")}catch(i){return!1}}()?Object.assign:function(e,o){for(var r,l,s=i(e),p=1;p<arguments.length;p++){for(var d in r=Object(arguments[p]))n.call(r,d)&&(s[d]=r[d]);if(t){l=t(r);for(var c=0;c<l.length;c++)a.call(r,l[c])&&(s[l[c]]=r[l[c]])}}return s}},541535:(e,t,n)=>{var a=n(862525),i=60103,o=60106;var r=60109,l=60110,s=60112;var p=60115,d=60116;if("function"==typeof Symbol&&Symbol.for){var c=Symbol.for;i=c("react.element"),o=c("react.portal"),c("react.fragment"),c("react.strict_mode"),c("react.profiler"),r=c("react.provider"),l=c("react.context"),s=c("react.forward_ref"),c("react.suspense"),p=c("react.memo"),d=c("react.lazy")}var u="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},k={};function g(e,t,n){this.props=e,this.context=t,this.refs=k,this.updater=n||m}function f(){}function b(e,t,n){this.props=e,this.context=t,this.refs=k,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},f.prototype=g.prototype;var y=b.prototype=new f;y.constructor=b,a(y,g.prototype),y.isPureReactComponent=!0;var N={current:null},w=Object.prototype.hasOwnProperty,v={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var a,o={},r=null,l=null;if(null!=t)for(a in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(r=""+t.key),t)w.call(t,a)&&!v.hasOwnProperty(a)&&(o[a]=t[a]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var p=Array(s),d=0;d<s;d++)p[d]=arguments[d+2];o.children=p}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===o[a]&&(o[a]=s[a]);return{$$typeof:i,type:e,key:r,ref:l,props:o,_owner:N.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var T=/\/+/g;function x(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,n,a,r){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case i:case o:s=!0}}if(s)return r=r(s=e),e=""===a?"."+x(s,0):a,Array.isArray(r)?(n="",null!=e&&(n=e.replace(T,"$&/")+"/"),S(r,t,n,"",(function(e){return e}))):null!=r&&(j(r)&&(r=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(r,n+(!r.key||s&&s.key===r.key?"":(""+r.key).replace(T,"$&/")+"/")+e)),t.push(r)),1;if(s=0,a=""===a?".":a+":",Array.isArray(e))for(var p=0;p<e.length;p++){var d=a+x(l=e[p],p);s+=S(l,t,n,d,r)}else if(d=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=u&&e[u]||e["@@iterator"])?e:null}(e),"function"==typeof d)for(e=d.call(e),p=0;!(l=e.next()).done;)s+=S(l=l.value,t,n,d=a+x(l,p++),r);else if("object"===l)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function I(e,t,n){if(null==e)return e;var a=[],i=0;return S(e,a,"","",(function(e){return t.call(n,e,i++)})),a}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var B={current:null};function P(){var e=B.current;if(null===e)throw Error(h(321));return e}},827378:(e,t,n)=>{n(541535)}}]);